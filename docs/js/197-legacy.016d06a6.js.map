{"version":3,"file":"js/197-legacy.016d06a6.js","mappings":"0LAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,iBAAiB,CAACF,EAAG,SAAS,CAACG,IAAI,WAAWH,EAAG,MAAM,CAACA,EAAG,SAAS,CAACI,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOT,EAAIU,sBAAsB,CAACV,EAAIW,GAAG,uBAC7PC,EAAkB,G,wCCatB,GACAC,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAC,SAAAA,CACA,CACAC,MAAAA,YACAC,KAAAA,CAAAA,GAAAA,GAAAA,GAAAA,GAAAA,IACAC,gBAAAA,WAEA,CACAF,MAAAA,YACAC,KAAAA,CAAAA,GAAAA,GAAAA,GAAAA,GAAAA,IACAC,gBAAAA,WAEA,CACAF,MAAAA,YACAC,KAAAA,CAAAA,GAAAA,GAAAA,GAAAA,GAAAA,IACAC,gBAAAA,aAMA,GACAC,KAAAA,MACAF,KAAAA,EACAG,QAAAA,CACAC,QAAAA,CACAC,MAAAA,CACAC,SAAAA,EACAC,KAAAA,iCAMAC,YAAAA,EACAC,WAAAA,EAEAC,OAAAA,CACAC,EAAAA,CACAC,SAAAA,GAEAC,EAAAA,CACAD,SAAAA,MAMA,GACAE,KAAAA,eAEAd,KAAAA,WAAA,OAEAe,MAAAA,OAAAA,OAAAA,CAAAA,MAAAA,SAGAC,QARA,WASA,YAGAC,QAAAA,CACAC,IADA,WAGA,UACA,MAIA,oBACAC,EAAAA,MAAAA,EACAA,EAAAA,OAAAA,EAGA,mBACA,0BAAAJ,MAAAA,IAEAK,QAAAA,MAAAA,CAAAL,MAAAA,KAGArB,iBAnBA,WAoBA,uBAEA,GADA0B,QAAAA,MAAAA,CAAAL,MAAAA,KACA,wBAMA,8BAOAK,QAAAA,MAAAA,CAAAC,IAAAA,EAAAA,IAGA,wBACA,IAIA,wCAEAD,QAAAA,MAAAA,CAAAE,WAAAA,IAEA,mBAEAF,QAAAA,MAAAA,CAAAG,SAAAA,IAGA,2BAEA,aACAH,QAAAA,MAAAA,CAAAI,gBAAAA,EAAAC,IAAAA,IAEA,4BACA,gBAAAvB,KAAAA,mBACAwB,EAAAA,EAAAA,QAAAA,EAAAA,QA9BAN,QAAAA,KACA,sFAPAA,QAAAA,KACA,mFCnGsS,I,UCQlSO,GAAY,OACd,EACA5C,EACAa,GACA,EACA,KACA,WACA,MAIF,EAAe+B,EAAiB","sources":["webpack://colors-to-color-palette/./src/views/Chartjs3View.vue?c7e1","webpack://colors-to-color-palette/src/views/Chartjs3View.vue","webpack://colors-to-color-palette/./src/views/Chartjs3View.vue?8e1f","webpack://colors-to-color-palette/./src/views/Chartjs3View.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"chartjs3-view\"},[_c('canvas',{ref:\"canvas\"}),_c('div',[_c('button',{on:{\"click\":function($event){return _vm.exportChartToSvg()}}},[_vm._v(\"Exportar SVG\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"chartjs3-view\">\n    <canvas ref=\"canvas\"></canvas>\n    <div>\n      <button @click=\"exportChartToSvg()\">Exportar SVG</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { saveAs } from \"file-saver\";\nimport Chart from \"chart.js/auto\";\nimport C2S from \"@/modules/export/helpers/canvas2svg-with-tweak\";\n\nconst data = {\n  labels: [0, 1, 2, 3, 4],\n  datasets: [\n    {\n      label: \"Dataset 1\",\n      data: [10, 11, 12, 13, 14],\n      backgroundColor: \"#FF0000\",\n    },\n    {\n      label: \"Dataset 2\",\n      data: [20, 21, 22, 23, 24],\n      backgroundColor: \"#0000FF\",\n    },\n    {\n      label: \"Dataset 3\",\n      data: [30, 31, 32, 33, 34],\n      backgroundColor: \"#00FF00\",\n    },\n  ],\n};\n\n/** @type {import('chart.js').ChartConfiguration} */\nconst config = {\n  type: \"bar\",\n  data: data,\n  options: {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Chart.js Bar Chart - Stacked\",\n      },\n    },\n    // desablitar maintainAspectRatio permite criar gráficos de qualquer tamanho.\n    // maintainAspectRatio: false,\n    // desabilitar responsive e animations faz o canvas2svg funcionar.\n    responsive: false,\n    animation: false,\n\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true,\n      },\n    },\n  },\n};\n\nexport default {\n  name: \"Chartjs3View\",\n\n  data: () => ({\n    // Técnica para o vue não deixar o objeto reativo\n    chart: Object.freeze({ chart: null }),\n  }),\n\n  mounted() {\n    this.run();\n  },\n\n  methods: {\n    run() {\n      // set the output dimensions (helpful especially for PNG)\n      const width = 900;\n      const height = 600;\n\n      // set the chart's size based on the values we set at the top\n      /** @type {{canvas: HTMLCanvasElement}} */\n      const { canvas } = this.$refs;\n      canvas.width = width;\n      canvas.height = height;\n\n      // create the chart\n      const chart = new Chart(canvas, config);\n      this.chart = Object.freeze({ chart });\n\n      console.debug({ chart });\n    },\n\n    exportChartToSvg() {\n      const { chart } = this.chart;\n      console.debug({ chart });\n      if (chart.options.animation !== false) {\n        console.warn(\n          'Cannot create SVG: \"animation\" is not set to false (see the options section)'\n        );\n        return;\n      }\n      if (chart.options.responsive !== false) {\n        console.warn(\n          'Cannot create SVG: \"responsive\" is not set to false (see the options section)'\n        );\n        return;\n      }\n\n      console.debug({ C2S });\n\n      /** @type {{canvas: HTMLCanvasElement}} */\n      const { canvas } = this.$refs;\n      const chartCanvas = canvas;\n\n      // get the dimensions of our original chart\n      // create an svg version of the chart\n      const svgContext = new C2S(chartCanvas.offsetWidth, chartCanvas.offsetHeight);\n\n      console.debug({ svgContext });\n\n      const svgChart = new Chart(svgContext, config);\n\n      console.debug({ svgChart });\n\n      //serialize your SVG\n      const mySerializedSVG = svgContext.getSerializedSvg(); //true here, if you need to convert named to numbered entities.\n      //If you really need to you can access the shadow inline SVG created by calling:\n      const svg = svgContext.getSvg();\n      console.debug({ mySerializedSVG, svg });\n\n      const filename = \"mySerializedSVG.svg\";\n      const blob = new Blob([mySerializedSVG], { type: \"image/svg+xml\" });\n      saveAs(blob, filename);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.chartjs3-view {\n  width: 90%;\n  margin: 2em auto 0 auto;\n}\n\ncanvas {\n  display: block;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Chartjs3View.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Chartjs3View.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Chartjs3View.vue?vue&type=template&id=75ac10a1&scoped=true&\"\nimport script from \"./Chartjs3View.vue?vue&type=script&lang=js&\"\nexport * from \"./Chartjs3View.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Chartjs3View.vue?vue&type=style&index=0&id=75ac10a1&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"75ac10a1\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","ref","on","$event","exportChartToSvg","_v","staticRenderFns","labels","datasets","label","data","backgroundColor","type","options","plugins","title","display","text","responsive","animation","scales","x","stacked","y","name","chart","mounted","methods","run","canvas","console","C2S","svgContext","svgChart","mySerializedSVG","svg","saveAs","component"],"sourceRoot":""}